{"version":3,"sources":["serviceWorker.js","components/front-end/table/TableView.jsx","index.js"],"names":["Boolean","window","location","hostname","match","TableView","rowNrID","isUpdating","stationListJSON","stationStatusListJSON","state","listOfTableDataConstructedFromJSON","componentDidMount","_this","getDataFromAPI","Promise","resolve","reject","fetch","header","Client-Identifier","then","response","json","JSONdata","catch","error","alert","extractViewDataFromJSON","listOfStationsProperty","data","stations","listOfStationsStatus","iterationLength","isStationsListAPIactive","isStationsStatusListAPIactive","length","tempArrayForTableData","i","nameOfStation","name","availableDocks","availableBikes","num_docks_available","num_bikes_available","push","stationName","numberOfBikesAvailable","numberOfDocksAvailable","setState","console","log","_this2","this","react_default","a","createElement","className","ButtonToolbar","Button","variant","block","onClick","Table","striped","bordered","hover","map","row","key","Component","ReactDOM","render","table_TableView","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa19cedd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../styles/TableView.css';\r\nimport {\r\n    ButtonToolbar, Table, Button\r\n} from 'react-bootstrap';\r\n\r\nclass TableView extends Component {\r\n    rowNrID = 0;\r\n    isUpdating = false; // flag to prevent rapid update requests.\r\n    // JSON files from fetch\r\n    stationListJSON = null;\r\n    stationStatusListJSON = null;\r\n    state = {\r\n        // combined informations ready to view\r\n        listOfTableDataConstructedFromJSON: []\r\n    }\r\n\r\n    // lifecycle hook that will run everytime this component is reloaded/starts\r\n    componentDidMount = () => {\r\n        this.getDataFromAPI();\r\n    }\r\n\r\n    //fetchs data from two API requestes\r\n    getDataFromAPI = () => {\r\n        if (this.isUpdating) {\r\n            return;\r\n        } else {\r\n            this.isUpdating = true; //update start\r\n        }\r\n        //fetch station property data needed from the API\r\n        let fetchStationsInfo = () => {\r\n            return new Promise((resolve, reject) => {\r\n                fetch('https://gbfs.urbansharing.com/oslobysykkel.no/station_information.json', {\r\n                    header: { \"Client-Identifier\": \"private-monitorapp\" }\r\n                }).then(response => {\r\n                    return response.json();\r\n                }).then(JSONdata => {\r\n                    this.stationListJSON = JSONdata;\r\n                    resolve();\r\n                }).catch(error => {\r\n                    reject('Stasjonenes informasjon er ikke tilgjengelig for øyebliket! \\n Vennligst prøv igjen senere', '\\n\\n', error);\r\n                });\r\n            });\r\n        }\r\n        //then fetch station status data needed from the API\r\n        let fetchStationsCurrentStatus = () => {\r\n            return new Promise((resolve, reject) => {\r\n                fetch('https://gbfs.urbansharing.com/oslobysykkel.no/station_status.json', {\r\n                    header: { \"Client-Identifier\": \"private-monitorapp\" }\r\n                }).then(response => {\r\n                    return response.json();\r\n                }).then(JSONdata => {\r\n                    this.stationStatusListJSON = JSONdata;\r\n                    resolve();\r\n                }).catch(error => {\r\n                    alert('Stasjonenes status informasjon er ikke tilgjengelig for øyebliket! \\n Vennligst prøv igjen senere', '\\n\\n', error);\r\n                    reject();\r\n                });\r\n            });\r\n        }\r\n        //actions are then guaranteed to go asynchronously!\r\n        fetchStationsInfo().then(() => {\r\n            return fetchStationsCurrentStatus();\r\n        }).then(() => {\r\n            this.extractViewDataFromJSON();\r\n        });\r\n    }\r\n\r\n    //extracts the relevant data to be viewd inside the table.\r\n    extractViewDataFromJSON = () => {\r\n        const listOfStationsProperty = this.stationListJSON.data.stations;\r\n        const listOfStationsStatus = this.stationStatusListJSON.data.stations;\r\n        let iterationLength = 0;\r\n        let isStationsListAPIactive = false;\r\n        let isStationsStatusListAPIactive = false;\r\n        if (listOfStationsProperty != null) {\r\n            iterationLength = listOfStationsProperty.length;\r\n            isStationsListAPIactive = true;\r\n        }\r\n        if (listOfStationsStatus != null) {\r\n            iterationLength = listOfStationsStatus.length;\r\n            isStationsStatusListAPIactive = true;\r\n        }\r\n        if ((listOfStationsProperty == null) && (listOfStationsStatus == null)) {\r\n            alert('Informasjonene er ikke tilgjengelige for øyebliket!\\n Vennligst prøv igjen senere.');\r\n            return; // terminate\r\n        }\r\n        let tempArrayForTableData = [];\r\n        for (let i = 0; i < iterationLength; i++) {\r\n            let nameOfStation = (isStationsListAPIactive) ? listOfStationsProperty[i].name : 'Ikke tilgjengelig';\r\n            let availableDocks = 'Ikke tilgjengelig';\r\n            let availableBikes = 'Ikke tilgjengelig';\r\n            if (isStationsStatusListAPIactive) {\r\n                availableDocks = listOfStationsStatus[i].num_docks_available;\r\n                availableBikes = listOfStationsStatus[i].num_bikes_available;\r\n            }\r\n            tempArrayForTableData.push(\r\n                {\r\n                    stationName: nameOfStation,\r\n                    numberOfBikesAvailable: availableBikes,\r\n                    numberOfDocksAvailable: availableDocks\r\n                }\r\n            );\r\n        }\r\n        //updates view data on reaload\r\n        this.setState({\r\n            listOfTableDataConstructedFromJSON: tempArrayForTableData\r\n        });\r\n        this.isUpdating = false; //update done\r\n        console.log('////updated////');\r\n    }\r\n\r\n    ///render view\r\n    render() {\r\n        return (\r\n            <div className=\"gridprimaryContainer container\">\r\n                <div className=\"bg-light py-1\">\r\n                    <ButtonToolbar>\r\n                        <h4>Oversikt for Oslo Bysykkel</h4>\r\n                    </ButtonToolbar>\r\n                </div>\r\n                <div className=\"bg-light py-1\">\r\n                    <ButtonToolbar>\r\n                        <Button variant=\"secondary\" block onClick={this.getDataFromAPI}> Oppdater </Button>\r\n                    </ButtonToolbar>\r\n                </div>\r\n                <Table striped bordered hover >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Stasjon</th>\r\n                            <th>Tilgjengelige låser</th>\r\n                            <th>Ledige sykler</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.listOfTableDataConstructedFromJSON.map(row => (\r\n                            <tr key={this.rowNrID++} >\r\n                                <td>{row.stationName}</td>\r\n                                <td>{row.numberOfDocksAvailable}</td>\r\n                                <td>{row.numberOfBikesAvailable}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TableView;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TableView from './components/front-end/table/TableView';\n\nReactDOM.render(<TableView />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}